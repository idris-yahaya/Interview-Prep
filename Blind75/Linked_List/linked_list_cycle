# https://leetcode.com/problems/linked-list-cycle/
# https://www.youtube.com/watch?v=gBTe7lFR3vc

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def hasCycle(self, head: Optional[ListNode]) -> bool:
        if not head:
            return False
        
        cycle = self.detectCycle(head)

        if cycle:
            curr = head
            pos = -1
            while curr:
                if curr.next == cycle:
                    print(pos)
                    return True
                curr = curr.next
                pos += 1
        else:
            return False

         
    def detectCycle(self, head):
        slow = head
        fast = head
    
        while fast and fast.next:
            slow = slow.next
            fast = fast.next.next

            if slow == fast:
                return slow
        
        return False